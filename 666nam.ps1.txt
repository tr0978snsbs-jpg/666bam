$ErrorActionPreference = "SilentlyContinue"

function Get-Signature {
    [CmdletBinding()]
    param (
        [string[]]$FilePath
    )

    $Existence = Test-Path -PathType "Leaf" -Path $FilePath
    $Authenticode = (Get-AuthenticodeSignature -FilePath $FilePath -ErrorAction SilentlyContinue).Status
    $Signature = "Invalid Signature (UnknownError)"

    if ($Existence) {
        if ($Authenticode -eq "Valid") {
            $Signature = "Valid Signature"
        }
        elseif ($Authenticode -eq "NotSigned") {
            $Signature = "Invalid Signature (NotSigned)"
        }
        elseif ($Authenticode -eq "HashMismatch") {
            $Signature = "Invalid Signature (HashMismatch)"
        }
        elseif ($Authenticode -eq "NotTrusted") {
            $Signature = "Invalid Signature (NotTrusted)"
        }
        elseif ($Authenticode -eq "UnknownError") {
            $Signature = "Invalid Signature (UnknownError)"
        }
        return $Signature
    }
    else {
        $Signature = "File Was Not Found"
        return $Signature
    }
}

Clear-Host

Write-Host -ForegroundColor Red "░█████╗░░█████╗░░█████╗░"
Write-Host -ForegroundColor Red "██╔═══╝░██╔═══╝░██╔═══╝░"
Write-Host -ForegroundColor Red "██████╗░██████╗░██████╗░"
Write-Host -ForegroundColor Red "██╔══██╗██╔══██╗██╔══██╗"
Write-Host -ForegroundColor Red "╚█████╔╝╚█████╔╝╚█████╔╝"

Write-Host ""
Write-Host -ForegroundColor Blue " Made By PureIntent (Shitty ScreenSharer) For 666 ScreenSharing and DFIR - " -NoNewLine
Write-Host -ForegroundColor Red "discord.gg/666"
Write-Host ""

function Test-Admin {
    $currentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
    $currentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)
}

if (-not (Test-Admin)) {
    Write-Warning "Please Run This Script as Admin."
    Start-Sleep 10
    Exit
}

$sw = [Diagnostics.Stopwatch]::StartNew()

if (-not (Get-PSDrive -Name HKLM -PSProvider Registry)) {
    Try {
        New-PSDrive -Name HKLM -PSProvider Registry -Root HKEY_LOCAL_MACHINE
    }
    Catch {
        Write-Warning "Error Mounting HKEY_Local_Machine"
    }
}

$bv = @("bam", "bam\State")
Try {
    $Users = foreach ($ii in $bv) {
        Get-ChildItem -Path "HKLM:\SYSTEM\CurrentControlSet\Services\$ii\UserSettings\" |
        Select-Object -ExpandProperty PSChildName
    }
}
Catch {
    Write-Warning "Error Parsing BAM Key. Likely unsupported Windows Version"
    Exit
}

$rpath = @(
    "HKLM:\SYSTEM\CurrentControlSet\Services\bam\",
    "HKLM:\SYSTEM\CurrentControlSet\Services\bam\state\"
)

$UserTime = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").TimeZoneKeyName
$UserBias = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").ActiveTimeBias
$UserDay = (Get-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\TimeZoneInformation").DaylightBias

$Bam = foreach ($Sid in $Users) {
    foreach ($rp in $rpath) {
        $BamItems = Get-Item -Path "$rp\UserSettings\$Sid" -ErrorAction SilentlyContinue |
                    Select-Object -ExpandProperty Property
        Write-Host -ForegroundColor Red "Extracting " -NoNewLine
        Write-Host -ForegroundColor Blue "$rp\UserSettings\$Sid"

        Try {
            $objSID = New-Object System.Security.Principal.SecurityIdentifier($Sid)
            $User = $objSID.Translate([System.Security.Principal.NTAccount]).Value
        }
        Catch {
            $User = ""
        }

        foreach ($Item in $BamItems) {
            $Key = (Get-ItemProperty -Path "$rp\UserSettings\$Sid" -ErrorAction SilentlyContinue).$Item
            if ($Key.Length -eq 24) {
                $Hex = [System.BitConverter]::ToString($Key[7..0]) -replace "-", ""
                $TimeLocal = Get-Date ([DateTime]::FromFileTime([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"
                $TimeUTC = Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))) -Format "yyyy-MM-dd HH:mm:ss"

                $Bias = -([Convert]::ToInt32([Convert]::ToString($UserBias, 2), 2))
                $Day = -([Convert]::ToInt32([Convert]::ToString($UserDay, 2), 2))

                $TimeUser = (Get-Date ([DateTime]::FromFileTimeUtc([Convert]::ToInt64($Hex, 16))).AddMinutes($Bias)) -Format "yyyy-MM-dd HH:mm:ss"

                $path = $null
                $app = $Item
                Try {
                    $sig = Get-Signature -FilePath $Item
                }
                Catch {
                    $sig = ""
                }

                [PSCustomObject]@{
                    'Examiner Time'               = $TimeLocal
                    'Last Execution Time (UTC)'   = $TimeUTC
                    'Last Execution User Time'    = $TimeUser
                    Application                    = $app
                    Path                           = $path
                    Signature                     = $sig
                    User                          = $User
                    SID                           = $Sid
                    Regpath                       = $rp
                }
            }
        }
    }
}

$Bam | Out-GridView -PassThru -Title "BAM key entries $($Bam.count) - TimeZone: $UserTime; Bias: $UserBias; DaylightBias: $UserDay"

$sw.Stop()
$t = $sw.Elapsed.TotalMinutes

Write-Host ""
Write-Host ("Elapsed Time {0} Minutes" -f [math]::Round($t,2)) -ForegroundColor Yellow
